#:::
#::: BUILD CONTAINER
#:::

# GO_VERSION is the golang version this image will be built against.
ARG GO_VERSION=1.13.8

# Node.js
FROM node:13.8.0-buster

# lotus-base testnet/3
FROM bbfe9201b574

# Copy Node.js
WORKDIR /usr/local/bin
COPY --from=0 /usr/local/lib/node_modules /usr/local/lib/node_modules
COPY --from=0 /opt/yarn-v1.21.1 /opt/yarn-v1.21.1
COPY --from=0 /usr/local/bin/node /usr/local/bin
RUN ln -s ../lib/node_modules/npm/bin/npm-cli.js npm
RUN ln -s ../lib/node_modules/npm/bin/npx-cli.js npx
RUN ln -s /opt/yarn-v1.21.1/bin/yarn yarn
WORKDIR /root

# TESTPLAN_EXEC_PKG is the executable package of the testplan to build.
# The image will build that package only.
ARG TESTPLAN_EXEC_PKG
# GO_PROXY is the go proxy that will be used, or direct by default.
ARG GO_PROXY=direct

# Debian deps
RUN apt-get install -y nginx \
	gconf-service \
	libasound2 \
	libatk1.0-0 \
	libatk-bridge2.0-0 \
	libc6 \
	libcairo2 \
	libcups2 \
	libdbus-1-3 \
	libexpat1 \
	libfontconfig1 \
	libgcc1 \
	libgconf-2-4 \
	libgdk-pixbuf2.0-0 \
	libglib2.0-0 \
	libgtk-3-0 \
	libnspr4 \
	libpango-1.0-0 \
	libpangocairo-1.0-0 \
	libstdc++6 \
	libx11-6 \
	libx11-xcb1 \
	libxcb1 \
	libxcomposite1 \
	libxcursor1 \
	libxdamage1 \
	libxext6 \
	libxfixes3 \
	libxi6 \
	libxrandr2 \
	libxrender1 \
	libxss1 \
	libxtst6 \
	ca-certificates \
	fonts-liberation \
	libappindicator1 \
	libnss3 \
	lsb-release \
	xdg-utils \
	wget \
	net-tools

# Lotus Debian dependencies
# based on lotus' tools/dockers/docker-examples/basic-miner-busybox

RUN apt-get update && apt-get install -y && apt-get install -y ca-certificates llvm clang mesa-opencl-icd ocl-icd-opencl-dev \
  vim less htop jq

RUN curl -sSf https://sh.rustup.rs | sh -s -- -y

# Testplan Go dependencies

ENV TESTPLAN_EXEC_PKG ${TESTPLAN_EXEC_PKG}

# Copy only go.mod files and download deps, in order to leverage Docker caching.
COPY /plan/go.mod /plan

# Download deps.
RUN cd /plan \
    && go env -w GOPROXY="${GO_PROXY}" \
    && go mod download

# Download npm deps
COPY /plan/js-lotus-client-rpc/package.json /plan/js-lotus-client-rpc/
RUN cd /plan/js-lotus-client-rpc && yarn

COPY /plan/js-lotus-client-testground/package.json /plan/js-lotus-client-testground/
RUN cd /plan/js-lotus-client-testground && yarn

# Now copy the rest of the source and run the build.

COPY . /
RUN rm -f /plan/checkout.sh
RUN mv /plan/test-data /root

RUN cd /plan/js-lotus-client-rpc && \
  rm -rf node_modules && \
	yarn && \
	yarn link

RUN cd /plan/js-lotus-client-testground && \
  rm -rf node_modules && \
  yarn && \
	yarn link @filecoin-shipyard/lotus-client-rpc

# Testground

RUN cd /plan \
    && go env -w GOPROXY="${GO_PROXY}" \
    && go build -o testplan ${TESTPLAN_EXEC_PKG}

# Store module dependencies
RUN cd /plan \
  && go list -m all > /testground_dep_list

WORKDIR /root

ENV PATH="/lotus:/plan:${PATH}"

ENTRYPOINT [ "/plan/testplan", "--vv"]
