name = "example"
# hashicorp/go-getter URLs, so in the future we can support fetching test plans
# from GitHub.
source_path = "file://${TESTGROUND_SRCDIR}/plans/example"

[defaults]
builder = "exec:go"
runner = "local:exec"

[build_strategies."docker:go"]
enabled = true
go_version = "1.13"
module_path = "github.com/ipfs/testground/plans/example"
exec_pkg = "."
go_ipfs_version = "0.4.22"

[build_strategies."exec:go"]
enabled = true
module_path = "github.com/ipfs/testground/plans/example"
exec_pkg = "."

[run_strategies."local:docker"]
enabled = true

[run_strategies."local:exec"]
enabled = true

[run_strategies."cluster:swarm"]
enabled = true

[run_strategies."cluster:k8s"]
enabled = true

[[testcases]]
name = "output"
instances = { min = 1, max = 200, default = 1 }

[[testcases]]
name = "failure"
instances = { min = 1, max = 200, default = 1 }

[[testcases]]
name = "panic"
instances = { min = 1, max = 200, default = 1 }

[[testcases]]
name = "params"
instances = { min = 1, max = 200, default = 1 }
  [testcases.params]
  param1 = { type = "int", desc = "some param 1", unit = "widgets", default=1 }
  param2 = { type = "int", desc = "some param 2", unit = "widgets", default=2 }
  param3 = { type = "int", desc = "some param 3", unit = "widgets", default=3 }

[[testcases]]
name = "sync"
instances = { min = 2, max = 200, default = 5 }

[[testcases]]
name = "prometheus"
instances = { min = 1, max = 200, default = 5 }

[[testcases]]
name = "prometheus2"
instances = { min = 1, max = 200, default = 5 }
