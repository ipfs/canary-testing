---
- hosts: all
  become: yes
  gather_facts: yes
  tasks:
    - name: Node IP
      debug: var=ansible_facts.default_ipv4.address
    - name: Get hosts
      debug: var=ansible_play_hosts
- hosts: manager
  become: yes
  gather_facts: yes
  tasks:
    - name: Get hosts
      debug: var=ansible_play_hosts
    - name: Init docker swarm
      docker_swarm:
        state: present
      register: docker_swarm_out
    - name: Dump docker_swarm_out
      debug: var=docker_swarm_out
    - name: Set join_token fact
      set_fact:
        join_token: "{{ docker_swarm_out.swarm_facts.JoinTokens.Worker }}"
    - name: Dump join_token
      debug: var=join_token
    - name: Create testground overlay control network
      docker_network:
        name: control
        driver: overlay
        attachable: yes
        enable_ipv6: no
        ipam_config:
          - subnet: 10.1.0.0/16
- hosts: redis
  become: yes
  gather_facts: yes
  tasks:
    - name: Get hosts
      debug: var=ansible_play_hosts
    - name: Identify manager node
      set_fact:
        manager: "{{ groups['manager'][0] }}"
    - name: Dump manager
      debug: var=manager
    - name: Fetch join_token
      set_fact:
        join_token: "{{ hostvars[manager].join_token }}"
    - name: Dump join_token
      debug: var=join_token
    - name: Join Docker Swarm as redis
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_facts.default_ipv4.address }}"
        join_token: "{{ join_token }}"
        remote_addrs: [ "{{ manager }}:2377" ]
- hosts: workers
  become: yes
  gather_facts: yes
  tasks:
    - name: Get hosts
      debug: var=ansible_play_hosts
    - name: Identify manager node
      set_fact:
        manager: "{{ groups['manager'][0] }}"
    - name: Dump manager
      debug: var=manager
    - name: Fetch join_token
      set_fact:
        join_token: "{{ hostvars[manager].join_token }}"
    - name: Dump join_token
      debug: var=join_token
    - name: Join Docker Swarm as worker
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_facts.default_ipv4.address }}"
        join_token: "{{ join_token }}"
        remote_addrs: [ "{{ manager }}:2377" ]
- hosts: manager
  become: yes
  gather_facts: yes
  tasks:
    - name: Set TGRole label to manager and drain
      docker_node:
        hostname: "{{ ansible_facts.hostname }}"
        labels:
          TGRole: manager
        availability: drain
    - name: Set TGRole label for redis
      docker_node:
        hostname: "{{ hostvars[item].ansible_facts.hostname }}"
        labels:
          TGRole: redis
      loop: "{{ groups['redis'] }}"
    - name: Set TGRole label for workers
      docker_node:
        hostname: "{{ hostvars[item].ansible_facts.hostname }}"
        labels:
          TGRole: worker
      loop: "{{ groups['workers'] }}"
    - name: Start redis service
      docker_swarm_service:
        name: testground-redis
        image: redis
        command: redis-server
        args:
          - --notify-keyspace-events $szxK
          - --save ""
          - --appendonly no
        networks:
          - control
        placement:
          constraints:
            - node.labels.TGRole == redis
    - name: Start sidecar service
      docker_swarm_service:
        name: testground-sidecar
        image: testground
        mode: global
        command: testground
        args:
          - sidecar
          - --runner docker
        networks:
          - control
        placement:
          constraints:
            - node.labels.TGRole == worker

