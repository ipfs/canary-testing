#:::
#::: BUILD CONTAINER
#:::

# GO_VERSION is the golang version this image will be built against.
ARG GO_VERSION=1.14

# Dynamically select the golang version.
# TODO: Not sure how this interplays with image caching.
FROM golang:${GO_VERSION}-buster

# Unfortunately there's no way to specify a ** glob pattern to cover all go.mods
# inside sdk.
COPY /sdk/sync/go.mod /sdk/sync/go.mod
COPY /sdk/runtime/go.mod /sdk/runtime/go.mod
COPY /go.mod /go.mod

# Download deps.
RUN cd / && go mod download

# Now copy the rest of the source and run the build.
COPY . /
RUN cd / && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o testground

#:::
#::: RUNTIME CONTAINER
#:::

#FROM golang:${GO_VERSION}-buster
FROM nonsens3/docker-dind:buster

RUN apt update && apt install -y iptables git apt-transport-https ca-certificates
RUN mkdir -p /usr/local/bin

# Copy testground binary
COPY --from=0 /testground /usr/local/bin/testground

# Add config
COPY /env-k8s.toml /root/.env.toml

# Copy dockerfile for testplan builds
COPY /pkg/build/golang/Dockerfile.template /root/pkg/build/golang/Dockerfile.template

# Copy SDK
COPY /sdk /sdk

# build failed    {"plan": "network", "group": "smth", "builder": "docker:go", "error": "unable to add replace directives to go.mod; exec: \"go\": executable file not found in $PATH"}
#
## install golang
ARG GO_VERSION=1.13.10
RUN wget -O go${GO_VERSION}.amd64.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
RUN tar -C /usr/local -xzf go${GO_VERSION}.amd64.tar.gz
#
# kubectl
RUN apt update && \
      apt install -y curl && \
      curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && \
      chmod +x ./kubectl && \
      mv ./kubectl /usr/local/bin/kubectl

WORKDIR /root

ENV PATH="/usr/local/go/bin:/usr/local/bin:${PATH}"

EXPOSE 8082

ENTRYPOINT [ "/usr/local/bin/testground", "--vv", "daemon" ]
